# Overview

- This is a Typescript and GO package which leverages AWS to create a remote browser ecosystem leveraging Stagehands LLM browsing capabilities. Wallcrawler is similar to Browserbase or Browserless.io, but an in-house solution for us to use in our own suite of applications.

## Browserbase

- We aim to leverage the packages sdk-node and stagehand by Browserbase as much as possible. These are open-source packages which we have forked to be used for Wallcrawler, but remaining backwards compatible. We will treat these packages as source of truth, and build our infra around them.

#### Noteworthy files include:

- wallcrawler/packages/stagehand/lib/index.ts <- the Stagehand class
- wallcrawler/packages/sdk-node/src/index.ts <- the Browserbase/Wallcrawler SDK classes
- Strictly adhere to the types defined in these packages

# Golden Rules

- Treat every change as though we are creating production ready implementations. If something is too complex, stop, ask questions, and we can handle complexity accordingly.
- Don't try to test new features on your own, always leave the testing to me. You should try building packages though to make sure they are sound.
- Before creating new classes, utils, or types, always search the Wallcrawler monorepo to see if it already exists. Rather than having duplicate function definitions across files, try to contain them to one place and import them.
- Opt for logic and functional correctness over linting correctness. Do not over concern yourself linting errors, especially Typescript.
- Always use pnpm to manage the packages.
- When creating new package config or linting files, always try to be consistent with other packages in the monorepo
- Follow naming conventions seen in the Wallcrawler design doc.
- Leverage our AWS stack wherever makes sense for scalability and cost. For example, use Redis pubsub or Eventbridge over polling.

# Creating commits

- If asked for a commit message, look at the actual diffs between files to provide an accurate message

# Docs

- When updating docs, don't label things as 'old' and 'new', just update what is the current state.
- Always try to provide AWS diagrams if possible using the MCP. Second best is Mermaid diagrams.
- Provide sequence diagrams if applicable.

# backend-go package

- Always make sure to update build.sh and Makefile accordingly, and update any build process changes in docs/build-cmds.md
- Make sure to update wallcrawler-stack accordingly

## Typescript rules

- Avoid using 'any' or 'unknown', especially excessive casting (as any, as unknown). Always opt for proper typing.
- Try to use relaxed eslint rules that allow us to be flexible, but use warnings so we have visibiltiy. Favor warnings over errors.
