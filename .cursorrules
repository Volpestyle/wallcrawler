# Summary

- Treat every change as though we are creating production ready implementations. If something is too complex, stop, and we can create a full implementation plan if there is a lot of complexity.

- This is a Typescript and GO package which leverages AWS to create a remote browser ecosystem leveraging Stagehands LLM browsing capabilities. Wallcrawler is similar to Browserbase or Browserless.io, but an in-house solution for us to use in our own suite of applications.
- Always refer to wallcrawler/docs/wallcrawler-design-doc.md (Wallcrawler design doc) as the source of truth when working in monorepo. Additionally there is supplemental documentation in /docs. The prompts.md, is simply guidance for building this in steps, but the design doc is the overall source of truth.
- Don't try to test new features on your own, always leave the testing to me. You should try building packages though to make sure they are sound.
- Before creating new utils, or types, always search the Wallcrawler monorepo to see if it already exists
- Before creating new classes, always search the Wallcrawler monorepo to make sure we haven't already created it.

# Creating commits

- If asked for a commit message, look at the actual diffs between files to provide an accurate

# Updating Docs

- When updating docs, don't label things as 'old' and 'new', just update what is the current state.

# General

- Opt for logic and functional correctness over linting correctness. Do not over concern yourself linting errors, especially Typescript.
- Avoid stubbing functions only if absolutely necessary. We will try to fully implement components and increment in chunks.
- When encountering repetitive logic, always favor to store reusable utils in our designated utils packages (go and typescript)

# Management

- Always use pnpm to manage the packages.
- Follow naming conventions seen in the Wallcrawler design doc.

## Typescript rules

- Avoid using 'any' or 'unknown', especially excessive casting (as any, as unknown). Always opt for proper typing.
- Try to use relaxed eslint rules that allow us to be flexible, but use warnings so we have visibiltiy. Favor warnings over errors.

## New packages

- When creating new package config or linting files, always try to be consistent with other packages in the monorepo
