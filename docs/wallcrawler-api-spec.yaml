openapi: 3.0.3
info:
  title: Wallcrawler API
  description: |
    Wallcrawler API for remote browser automation and Stagehand integration.

    This API provides endpoints for managing browser sessions and executing 
    Stagehand operations including acting, extracting, observing, and navigation.

    All streaming endpoints return Server-Sent Events (SSE) with the following event types:
    - `system` events with status "finished" or "error"
    - `log` events for real-time logging

    All successful responses are wrapped in `{success: true, data: <result>}` format.
    Error responses use `{success: false, message: string}` format.
  version: 1.0.0
  contact:
    name: Wallcrawler API Support
  license:
    name: MIT

servers:
  - url: https://api.wallcrawler.dev/v1
    description: Production server
  - url: http://localhost:8080/v1
    description: Development server

security:
  - ApiKeyAuth: []

paths:
  /start-session:
    post:
      summary: Create a new browser session
      description: Creates a new browser session with optional user metadata and scripts
      operationId: createSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionCreateRequest'
      responses:
        '200':
          description: Session created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/SessionCreateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /sessions/start:
    post:
      summary: Start a Stagehand session
      description: |
        Start a new Stagehand session with LLM configuration and browser settings.
        Compatible with Browserbase API format for Stagehand integration.
      operationId: startStagehandSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartSessionRequest'
      responses:
        '200':
          description: Session started successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/StartSessionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /sessions/{sessionId}/retrieve:
    get:
      summary: Retrieve session information
      description: Get current status and metadata for a browser session
      operationId: retrieveSession
      parameters:
        - $ref: '#/components/parameters/SessionId'
      responses:
        '200':
          description: Session information retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Session'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /sessions/{sessionId}/debug:
    get:
      summary: Get session debug URL
      description: Retrieve the debug/inspector URL for the browser session
      operationId: getSessionDebugUrl
      parameters:
        - $ref: '#/components/parameters/SessionId'
      responses:
        '200':
          description: Debug URL retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          debuggerUrl:
                            type: string
                            format: uri
                            description: URL for browser debugging/inspection
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /sessions/{sessionId}/act:
    post:
      summary: Perform an action on the page
      description: |
        Execute an action instruction on the current page using LLM guidance.
        Returns a streaming response with real-time logs and final result.
      operationId: performAction
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/StreamResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActRequest'
      responses:
        '200':
          description: Action executed (streaming response)
          content:
            text/plain:
              schema:
                type: string
                description: Server-Sent Events stream
                example: |
                  data: {"type": "log", "data": {"message": {"level": "info", "text": "Starting action execution"}}}

                  data: {"type": "system", "data": {"status": "finished", "result": {"success": true, "message": "Action completed", "action": "click button"}}}
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /sessions/{sessionId}/extract:
    post:
      summary: Extract data from the page
      description: |
        Extract structured data from the current page using optional schema validation.
        Returns a streaming response with the extracted data.
      operationId: extractData
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/StreamResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtractRequest'
      responses:
        '200':
          description: Data extracted (streaming response)
          content:
            text/plain:
              schema:
                type: string
                description: Server-Sent Events stream with extracted data
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /sessions/{sessionId}/observe:
    post:
      summary: Observe elements on the page
      description: |
        Identify and describe interactive elements on the current page.
        Returns a streaming response with element observations.
      operationId: observeElements
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/StreamResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObserveRequest'
      responses:
        '200':
          description: Elements observed (streaming response)
          content:
            text/plain:
              schema:
                type: string
                description: Server-Sent Events stream with element observations
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /sessions/{sessionId}/navigate:
    post:
      summary: Navigate to a URL
      description: |
        Navigate the browser to a specified URL with optional navigation options.
        Returns a streaming response confirming navigation completion.
      operationId: navigate
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/StreamResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NavigateRequest'
      responses:
        '200':
          description: Navigation completed (streaming response)
          content:
            text/plain:
              schema:
                type: string
                description: Server-Sent Events stream confirming navigation
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /sessions/{sessionId}/agentExecute:
    post:
      summary: Execute agent operations
      description: |
        Execute complex multi-step operations using AI agent capabilities.
        Returns a streaming response with agent actions and final result.
      operationId: executeAgent
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/StreamResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentExecuteRequest'
      responses:
        '200':
          description: Agent execution completed (streaming response)
          content:
            text/plain:
              schema:
                type: string
                description: Server-Sent Events stream with agent actions and results
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /sessions/{sessionId}/end:
    post:
      summary: End a session
      description: Terminate the browser session and clean up resources
      operationId: endSession
      parameters:
        - $ref: '#/components/parameters/SessionId'
      responses:
        '200':
          description: Session ended successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-wc-api-key
      description: API key for authentication

  parameters:
    SessionId:
      name: sessionId
      in: path
      required: true
      description: Unique identifier for the browser session
      schema:
        type: string
        example: 'sess_123abc456'

    StreamResponse:
      name: x-stream-response
      in: header
      required: false
      description: Enable streaming response format
      schema:
        type: string
        enum: ['true', 'false']
        default: 'true'

  schemas:
    SuccessResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
          enum: [true]
          description: Indicates successful operation

    ErrorResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          enum: [false]
          description: Indicates failed operation
        message:
          type: string
          description: Error message describing what went wrong

    SessionCreateRequest:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: string
          description: Project identifier for the session
          example: 'proj_123abc'
        script:
          type: string
          description: Optional initialization script to run
        userMetadata:
          type: object
          additionalProperties:
            type: string
          description: Optional user-defined metadata

    SessionCreateResponse:
      type: object
      required:
        - id
        - connectUrl
      properties:
        id:
          type: string
          description: Unique session identifier
          example: 'sess_123abc456'
        connectUrl:
          type: string
          format: uri
          description: WebSocket URL for browser connection
          example: 'wss://session.wallcrawler.dev/sess_123abc456'

    StartSessionRequest:
      type: object
      required:
        - modelName
        - modelApiKey
        - domSettleTimeoutMs
        - verbose
        - debugDom
      properties:
        modelName:
          type: string
          description: LLM model to use for operations
          example: 'gpt-4o'
        modelApiKey:
          type: string
          description: API key for the LLM provider
        domSettleTimeoutMs:
          type: number
          description: Timeout for DOM stabilization in milliseconds
          example: 10000
        verbose:
          type: number
          description: Logging verbosity level (0-2)
          minimum: 0
          maximum: 2
          example: 1
        debugDom:
          type: boolean
          description: Enable DOM debugging features
          example: false
        systemPrompt:
          type: string
          description: Custom system prompt for the LLM
        selfHeal:
          type: boolean
          description: Enable self-healing capabilities
          example: true
        waitForCaptchaSolves:
          type: boolean
          description: Wait for CAPTCHA resolution
          example: false
        actionTimeoutMs:
          type: number
          description: Timeout for individual actions in milliseconds
          example: 30000
        browserbaseSessionCreateParams:
          type: object
          description: Browser session creation parameters
          properties:
            region:
              type: string
              example: 'us-west-2'
            userMetadata:
              type: object
              additionalProperties:
                type: string
        browserbaseSessionID:
          type: string
          description: Existing session ID to resume

    StartSessionResponse:
      type: object
      required:
        - sessionId
      properties:
        sessionId:
          type: string
          description: Unique session identifier
          example: 'sess_123abc456'
        available:
          type: boolean
          description: Whether the session is available for use
          example: true

    Session:
      type: object
      required:
        - id
        - status
        - connectUrl
      properties:
        id:
          type: string
          description: Unique session identifier
          example: 'sess_123abc456'
        status:
          type: string
          enum: ['RUNNING', 'STOPPED', 'ERROR']
          description: Current session status
        connectUrl:
          type: string
          format: uri
          description: WebSocket URL for browser connection

    ActRequest:
      type: object
      required:
        - action
      properties:
        action:
          type: string
          description: Natural language instruction for the action to perform
          example: 'Click the submit button'
        modelName:
          type: string
          description: Override LLM model for this operation
        variables:
          type: object
          additionalProperties:
            type: string
          description: Variables to substitute in the action
        domSettleTimeoutMs:
          type: number
          description: Override DOM settle timeout
        timeoutMs:
          type: number
          description: Action-specific timeout
        iframes:
          type: boolean
          description: Include iframe content in processing

    ActResult:
      type: object
      required:
        - success
        - message
        - action
      properties:
        success:
          type: boolean
          description: Whether the action was successful
        message:
          type: string
          description: Descriptive message about the action result
        action:
          type: string
          description: The action that was performed

    ExtractRequest:
      type: object
      properties:
        instruction:
          type: string
          description: Natural language instruction for data extraction
          example: 'Extract all product names and prices'
        schemaDefinition:
          type: object
          description: JSON Schema for validating extracted data
        modelName:
          type: string
          description: Override LLM model for this operation
        domSettleTimeoutMs:
          type: number
          description: Override DOM settle timeout
        selector:
          type: string
          description: CSS selector to limit extraction scope
        iframes:
          type: boolean
          description: Include iframe content in processing

    ObserveRequest:
      type: object
      properties:
        instruction:
          type: string
          description: Natural language instruction for observation
          example: 'Find all clickable buttons'
        modelName:
          type: string
          description: Override LLM model for this operation
        domSettleTimeoutMs:
          type: number
          description: Override DOM settle timeout
        returnAction:
          type: boolean
          description: Return actionable elements only
        drawOverlay:
          type: boolean
          description: Draw visual overlay on observed elements
        iframes:
          type: boolean
          description: Include iframe content in processing

    ObserveResult:
      type: object
      required:
        - selector
        - description
      properties:
        selector:
          type: string
          description: CSS selector for the observed element
        description:
          type: string
          description: Natural language description of the element
        backendNodeId:
          type: number
          description: Internal node identifier
        method:
          type: string
          description: Suggested interaction method
        arguments:
          type: array
          items:
            type: string
          description: Arguments for the suggested method

    NavigateRequest:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          format: uri
          description: URL to navigate to
          example: 'https://example.com'
        options:
          type: object
          description: Navigation options (Playwright GotoOptions)
          properties:
            timeout:
              type: number
              description: Navigation timeout in milliseconds
            waitUntil:
              type: string
              enum: ['load', 'domcontentloaded', 'networkidle']
              description: When to consider navigation complete

    AgentExecuteRequest:
      type: object
      required:
        - agentConfig
        - executeOptions
      properties:
        agentConfig:
          $ref: '#/components/schemas/AgentConfig'
        executeOptions:
          $ref: '#/components/schemas/AgentExecuteOptions'

    AgentConfig:
      type: object
      properties:
        provider:
          type: string
          enum: ['openai', 'anthropic']
          description: AI provider for agent operations
        model:
          type: string
          description: Specific model to use
          example: 'gpt-4o'
        instructions:
          type: string
          description: Custom instructions for the agent
        options:
          type: object
          additionalProperties: true
          description: Additional provider-specific options

    AgentExecuteOptions:
      type: object
      required:
        - instruction
      properties:
        instruction:
          type: string
          description: High-level instruction for the agent to execute
          example: 'Find and book the cheapest flight to Paris'
        maxSteps:
          type: number
          description: Maximum number of steps the agent can take
          default: 10
          example: 15
        autoScreenshot:
          type: boolean
          description: Take screenshots automatically before each step
          default: true
        waitBetweenActions:
          type: number
          description: Wait time between actions in milliseconds
          default: 0
          example: 1000
        context:
          type: string
          description: Additional context for the agent

    AgentResult:
      type: object
      required:
        - success
        - message
        - actions
        - completed
      properties:
        success:
          type: boolean
          description: Whether the agent execution was successful
        message:
          type: string
          description: Summary message about the execution
        actions:
          type: array
          items:
            $ref: '#/components/schemas/AgentAction'
          description: List of actions performed by the agent
        completed:
          type: boolean
          description: Whether the agent completed its task
        metadata:
          type: object
          additionalProperties: true
          description: Additional execution metadata
        usage:
          $ref: '#/components/schemas/TokenUsage'

    AgentAction:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: Type of action performed
          example: 'click'
      additionalProperties: true

    TokenUsage:
      type: object
      properties:
        input_tokens:
          type: number
          description: Number of input tokens used
        output_tokens:
          type: number
          description: Number of output tokens generated
        inference_time_ms:
          type: number
          description: Time spent in inference (milliseconds)

    StreamEvent:
      type: object
      required:
        - type
        - data
      properties:
        type:
          type: string
          enum: ['system', 'log']
          description: Type of streaming event
        data:
          oneOf:
            - $ref: '#/components/schemas/SystemEvent'
            - $ref: '#/components/schemas/LogEvent'

    SystemEvent:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: ['finished', 'error']
          description: System event status
        result:
          type: object
          description: Final result data (when status is "finished")
        error:
          type: string
          description: Error message (when status is "error")

    LogEvent:
      type: object
      required:
        - message
      properties:
        message:
          type: object
          description: Log message data
          properties:
            level:
              type: string
              enum: ['debug', 'info', 'warn', 'error']
            text:
              type: string
            timestamp:
              type: string
              format: date-time

  responses:
    BadRequest:
      description: Bad request - invalid parameters or request format
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  message:
                    example: 'Invalid request parameters'

    Unauthorized:
      description: Unauthorized - invalid or missing API key
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  message:
                    example: 'Invalid API key or unauthorized access'

    NotFound:
      description: Not found - session does not exist
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  message:
                    example: 'Session not found'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  message:
                    example: 'Internal server error'

  examples:
    ActRequestExample:
      summary: Click button action
      value:
        action: 'Click the submit button'
        domSettleTimeoutMs: 5000
        timeoutMs: 30000

    ExtractRequestExample:
      summary: Extract product data
      value:
        instruction: 'Extract all product names and prices from this page'
        schemaDefinition:
          type: 'object'
          properties:
            products:
              type: 'array'
              items:
                type: 'object'
                properties:
                  name:
                    type: 'string'
                  price:
                    type: 'string'

    ObserveRequestExample:
      summary: Find form inputs
      value:
        instruction: 'Find all input fields that need to be filled'
        returnAction: true
        drawOverlay: false

    NavigateRequestExample:
      summary: Navigate to homepage
      value:
        url: 'https://example.com'
        options:
          waitUntil: 'networkidle'
          timeout: 30000

    AgentExecuteRequestExample:
      summary: Book flight with agent
      value:
        agentConfig:
          provider: 'openai'
          model: 'gpt-4o'
          instructions: 'You are a helpful travel booking assistant'
        executeOptions:
          instruction: 'Find and book the cheapest flight from NYC to Paris for next week'
          maxSteps: 20
          autoScreenshot: true
          waitBetweenActions: 2000

tags:
  - name: Sessions
    description: Browser session management operations
  - name: Stagehand
    description: Core Stagehand automation operations
  - name: Agent
    description: AI agent execution capabilities
